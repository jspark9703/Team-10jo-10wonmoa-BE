plugins {
    id 'org.springframework.boot' version '2.6.10'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.prgrms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

checkstyle {
    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail을 내고 싶다면 이 선언을 추가한다.
    configFile = file("${rootDir}/config/checkstyle/naver-checkstyle-rules.xml")
    toolVersion = "10.2"  // checkstyle 버전 8.24 이상 선언
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    // WAS: undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    //Lombok
    compileOnly 'org.projectlombok:lombok'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //DB
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2:1.4.199'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false

        def Qdomains = []
        for (qPattern in '**/QA'..'**/QZ') {
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'com/prgrms/tenwonmoa/TenwonmoaApplication.class',
                        'com/prgrms/tenwonmoa/aop/*',
                        'com/prgrms/tenwonmoa/aws/*',
                        'com/prgrms/tenwonmoa/config/*',
                        'com/prgrms/tenwonmoa/exception/*',
                        'com/prgrms/tenwonmoa/filter/*',
                        'com/prgrms/tenwonmoa/domain/budget/*',
                        'com/prgrms/tenwonmoa/domain/common/*',
                ] + Qdomains)
            }))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    'com/prgrms/tenwonmoa/TenwonmoaApplication.class',
                    'com/prgrms/tenwonmoa/aop/*',
                    'com/prgrms/tenwonmoa/aws/*',
                    'com/prgrms/tenwonmoa/config/*',
                    'com/prgrms/tenwonmoa/exception/*',
                    'com/prgrms/tenwonmoa/filter/*',
                    'com/prgrms/tenwonmoa/domain/budget/*',
                    'com/prgrms/tenwonmoa/domain/common/*',
            ] + Qdomains
        }
    }
}

// -plain.jar 생성되지 않도록 추가
jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}


