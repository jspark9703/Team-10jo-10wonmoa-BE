plugins {
    id 'org.springframework.boot' version '2.6.10'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'com.epages.restdocs-api-spec' version '0.16.0'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'src/main/resources/static/docs'
    }
}

group = 'com.prgrms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

checkstyle {
    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail을 내고 싶다면 이 선언을 추가한다.
    configFile = file("${rootDir}/config/checkstyle/naver-checkstyle-rules.xml")
    toolVersion = "10.2"  // checkstyle 버전 8.24 이상 선언
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    // WAS: undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    //Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Guava
    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //DB
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2:1.4.199'

    //flyway
    implementation 'org.flywaydb:flyway-core:8.5.12'
    implementation 'org.flywaydb:flyway-mysql:8.5.12'


    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // spring-boot-security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'com.auth0:java-jwt:3.18.1'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.0'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport', 'openapi3'
    outputs.dir snippetsDir
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false

        def Qdomains = []
        for (qPattern in '**/QA'..'**/QZ') {
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'com/prgrms/tenwonmoa/TenwonmoaApplication.class',
                        'com/prgrms/tenwonmoa/aop/*',
                        'com/prgrms/tenwonmoa/aws/*',
                        'com/prgrms/tenwonmoa/config/*',
                        'com/prgrms/tenwonmoa/exception/*',
                        'com/prgrms/tenwonmoa/filter/*',
                        'com/prgrms/tenwonmoa/domain/budget/*',
                        'com/prgrms/tenwonmoa/domain/common/*',
                        'com/prgrms/tenwonmoa/domain/**/dto/*'
                ] + Qdomains)
            }))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    'com/prgrms/tenwonmoa/TenwonmoaApplication.class',
                    'com/prgrms/tenwonmoa/aop/*',
                    'com/prgrms/tenwonmoa/aws/*',
                    'com/prgrms/tenwonmoa/config/*',
                    'com/prgrms/tenwonmoa/exception/*',
                    'com/prgrms/tenwonmoa/filter/*',
                    'com/prgrms/tenwonmoa/domain/budget/*',
                    'com/prgrms/tenwonmoa/domain/common/*',
                    'com/prgrms/tenwonmoa/domain/**/dto/*'
            ] + Qdomains
        }
    }
}

// -plain.jar 생성되지 않도록 추가
jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task copySecret(type: Copy) {
    from file("10wonmoa-BE-Security")
    into file("src/main/resources/")
}

processResources.dependsOn('copySecret')

openapi3 {
    server = 'http://3.39.184.232:8080'
    title = 'Tenwonmoa API'
    description = 'Tenwonmoa API description'
    version = '1.0.0'
    format = 'yaml'
}

task copyOpenApi(type: Copy) {
    from file("build/api-spec")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
    finalizedBy 'copyOpenApi'
}